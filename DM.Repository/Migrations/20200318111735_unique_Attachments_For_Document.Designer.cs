// <auto-generated />
using System;
using DM.Repository.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DM.Repository.Migrations
{
    [DbContext(typeof(DocumentDBContext))]
    [Migration("20200318111735_unique_Attachments_For_Document")]
    partial class unique_Attachments_For_Document
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DM.Domain.AggregateDocument", b =>
                {
                    b.Property<int>("MinParentDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("ChildDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("AggregateMetaDataModelID")
                        .HasColumnType("int");

                    b.Property<int?>("MaxParentDocumentVersionId")
                        .HasColumnType("int");

                    b.HasKey("MinParentDocumentVersionId", "ChildDocumentVersionId");

                    b.HasIndex("AggregateMetaDataModelID");

                    b.HasIndex("ChildDocumentVersionId");

                    b.ToTable("AggregateDocument");
                });

            modelBuilder.Entity("DM.Domain.AggregateMetaDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AggregateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChildMetadataModelId")
                        .HasColumnType("int");

                    b.Property<int>("ParentMetadataModelId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ChildMetadataModelId");

                    b.HasIndex("ParentMetadataModelId", "ChildMetadataModelId", "AggregateName")
                        .IsUnique();

                    b.ToTable("AggregateMetaDataModel");
                });

            modelBuilder.Entity("DM.Domain.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc4b4ad0-047e-4007-a504-53bb0504d419",
                            Email = "admin@lit-co.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LIT-CO.NET",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOOWdHLYJ1HOXGdnMEHBrpVudeP+U29TY93FpS59aPr4/hYOdw8/caTV6sNPpdtVXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5d9b8a2-f0eb-465f-bd92-0c6576af9a8c",
                            Email = "user@lit-co.net",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LIT-CO.NET",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSdEudkUOPRIFqGYKCGTAEtv3YIr1YP0pD+olEkHXGIXyTI9v6PyTVzIVOSNP8bbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("DM.Domain.Attachment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("AttachmentFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("CompoundModelID")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CompoundModelID");

                    b.HasIndex("DocumentId", "CompoundModelID")
                        .IsUnique()
                        .HasFilter("[CompoundModelID] IS NOT NULL");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("DM.Domain.BoolValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Value")
                        .HasColumnType("bit");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("BoolValue");
                });

            modelBuilder.Entity("DM.Domain.CompoundModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("MetaDataModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MetaDataModelID");

                    b.ToTable("CompoundModel");
                });

            modelBuilder.Entity("DM.Domain.DataType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DataTypeName")
                        .IsUnique();

                    b.ToTable("DataType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DataTypeName = "bool"
                        },
                        new
                        {
                            ID = 2,
                            DataTypeName = "date"
                        },
                        new
                        {
                            ID = 3,
                            DataTypeName = "decimal"
                        },
                        new
                        {
                            ID = 4,
                            DataTypeName = "double"
                        },
                        new
                        {
                            ID = 5,
                            DataTypeName = "int"
                        },
                        new
                        {
                            ID = 6,
                            DataTypeName = "string"
                        });
                });

            modelBuilder.Entity("DM.Domain.DateValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Value")
                        .HasColumnType("datetime2");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("DateValue");
                });

            modelBuilder.Entity("DM.Domain.DecimalValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,5)");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("DecimalValue");
                });

            modelBuilder.Entity("DM.Domain.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("LatestVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LatestVersionId")
                        .IsUnique()
                        .HasFilter("[LatestVersionId] IS NOT NULL");

                    b.HasIndex("MetaDataModelId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("DM.Domain.DocumentClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentClassName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("DocumentClass");
                });

            modelBuilder.Entity("DM.Domain.DocumentScan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("DocumnetScan")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MinDocumentVersionId");

                    b.ToTable("DocumentScan");
                });

            modelBuilder.Entity("DM.Domain.DocumentSet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentSet");
                });

            modelBuilder.Entity("DM.Domain.DocumentSet_Document", b =>
                {
                    b.Property<int>("DocumentSetId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.HasKey("DocumentSetId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentSet_Document");
                });

            modelBuilder.Entity("DM.Domain.DocumentVersion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VersionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentVersion");
                });

            modelBuilder.Entity("DM.Domain.DoubleValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("DoubleValue");
                });

            modelBuilder.Entity("DM.Domain.IntValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("IntValue");
                });

            modelBuilder.Entity("DM.Domain.MetaDataAttribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DataTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDataAttributeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetaDataModelID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DataTypeID");

                    b.HasIndex("MetaDataModelID");

                    b.ToTable("MetaDataAttribute");
                });

            modelBuilder.Entity("DM.Domain.MetaDataModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentClassId")
                        .HasColumnType("int");

                    b.Property<string>("MetaDataModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DocumentClassId");

                    b.HasIndex("MetaDataModelName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("MetaDataModel");
                });

            modelBuilder.Entity("DM.Domain.RecursiveDocumentSet", b =>
                {
                    b.Property<int>("ParentDocumentSetId")
                        .HasColumnType("int");

                    b.Property<int>("ChildDocumentSetId")
                        .HasColumnType("int");

                    b.HasKey("ParentDocumentSetId", "ChildDocumentSetId");

                    b.HasIndex("ChildDocumentSetId");

                    b.ToTable("RecursiveDocumentSet");
                });

            modelBuilder.Entity("DM.Domain.StringValue", b =>
                {
                    b.Property<int>("MinDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int>("MetaDataAttributeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDocumentVersionId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MinDocumentVersionId", "MetaDataAttributeId");

                    b.HasIndex("MetaDataAttributeId");

                    b.ToTable("StringValue");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f6176c61-0b3a-46c0-bc3b-e58fc058ae77",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "816ebc44-0d48-49ad-884c-bd9f33b67aa4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DM.Domain.AggregateDocument", b =>
                {
                    b.HasOne("DM.Domain.AggregateMetaDataModel", "AggregateMetaDataModel")
                        .WithMany("AggregateDocuments")
                        .HasForeignKey("AggregateMetaDataModelID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "ChildDocumentVersion")
                        .WithMany("ParentDocumentVersions")
                        .HasForeignKey("ChildDocumentVersionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "MinParentDocumentVersion")
                        .WithMany("ChildDocumentVersions")
                        .HasForeignKey("MinParentDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.AggregateMetaDataModel", b =>
                {
                    b.HasOne("DM.Domain.MetaDataModel", "ChildMetaDataModel")
                        .WithMany("ParentMetaDataModels")
                        .HasForeignKey("ChildMetadataModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.MetaDataModel", "ParentMetaDataModel")
                        .WithMany("ChildMetaDataModels")
                        .HasForeignKey("ParentMetadataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.Attachment", b =>
                {
                    b.HasOne("DM.Domain.CompoundModel", "CompoundModel")
                        .WithMany("Attachments")
                        .HasForeignKey("CompoundModelID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DM.Domain.Document", "Document")
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.BoolValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("BoolValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("BoolValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.CompoundModel", b =>
                {
                    b.HasOne("DM.Domain.MetaDataModel", "MetaDataModel")
                        .WithMany("CompoundModels")
                        .HasForeignKey("MetaDataModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DateValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("DateValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("DateValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DecimalValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("DecimalValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("DecimalValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.Document", b =>
                {
                    b.HasOne("DM.Domain.DocumentVersion", "LatestDocumentVersion")
                        .WithOne()
                        .HasForeignKey("DM.Domain.Document", "LatestVersionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DM.Domain.MetaDataModel", "MetaDataModel")
                        .WithMany("Documents")
                        .HasForeignKey("MetaDataModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DocumentClass", b =>
                {
                    b.HasOne("DM.Domain.ApplicationUser", "User")
                        .WithMany("DocumentClasses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DocumentScan", b =>
                {
                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("DocumnetScans")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DocumentSet", b =>
                {
                    b.HasOne("DM.Domain.ApplicationUser", "User")
                        .WithMany("DocumentSets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DocumentSet_Document", b =>
                {
                    b.HasOne("DM.Domain.Document", "Document")
                        .WithMany("Set_Documents")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentSet", "DocumentSet")
                        .WithMany("Set_Documents")
                        .HasForeignKey("DocumentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DocumentVersion", b =>
                {
                    b.HasOne("DM.Domain.Document", "Document")
                        .WithMany("DocumentVersions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Domain.ApplicationUser", "User")
                        .WithMany("DocumentVersions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.DoubleValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("DoubleValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("DoubleValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.IntValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("IntValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("IntValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.MetaDataAttribute", b =>
                {
                    b.HasOne("DM.Domain.DataType", "DataType")
                        .WithMany("MetaDataAttributes")
                        .HasForeignKey("DataTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Domain.MetaDataModel", "MetaDataModel")
                        .WithMany("MetaDataAttributes")
                        .HasForeignKey("MetaDataModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.MetaDataModel", b =>
                {
                    b.HasOne("DM.Domain.DocumentClass", "DocumentClass")
                        .WithMany("MetaDataModels")
                        .HasForeignKey("DocumentClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Domain.ApplicationUser", "User")
                        .WithMany("MetaDataModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.RecursiveDocumentSet", b =>
                {
                    b.HasOne("DM.Domain.DocumentSet", "ChildDocumentSet")
                        .WithMany("ParentDocumentsSets")
                        .HasForeignKey("ChildDocumentSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentSet", "ParentDocumentSet")
                        .WithMany("ChildDocumentsSets")
                        .HasForeignKey("ParentDocumentSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DM.Domain.StringValue", b =>
                {
                    b.HasOne("DM.Domain.MetaDataAttribute", "MetaDataAttribute")
                        .WithMany("StringValues")
                        .HasForeignKey("MetaDataAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DM.Domain.DocumentVersion", "DocumentVersion")
                        .WithMany("StringValues")
                        .HasForeignKey("MinDocumentVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DM.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DM.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DM.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DM.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
